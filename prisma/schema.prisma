// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Salon {
  id    String   @default(uuid()) @id @db.Uuid
  name    String
  description    String?
  imageUrl    String?
  schedule    String?
  city    String?
  address    String?
  coordinateLat    String?
  coordinateLon    String?
  currencyShortTitle    String?
  extCompanyId    String
  tgBotId    BigInt
  tgBotName    String
  tgToken    String
  contacts    SalonContact[]
  users User[]
  masters Master[]
  services Service[]
  serviceCategories ServiceCategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("salons")
}

model Master {
  id        String    @default(uuid()) @id @db.Uuid
  extId     String?
  name      String?
  post      String?
  imageUrl  String?
  rating    Float?
  weight    Int?
  bookable  Boolean?
  salon     Salon?    @relation(fields: [salonId], references: [id])
  salonId   String?   @db.Uuid
  services  MasterService[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@map("masters")
}

model Service {
  id        String    @default(uuid()) @id @db.Uuid
  extId     String?
  name      String?
  imageUrl  String?
  time      Int?
  priceMin  Int?
  priceMax  Int?
  weight    Int?
  salon     Salon?    @relation(fields: [salonId], references: [id])
  salonId   String?   @db.Uuid
  category  ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?  @db.Uuid
  masters   MasterService[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@map("services")
}

model MasterService {
  id        String    @default(uuid()) @id @db.Uuid
  masterId  String    @db.Uuid
  serviceId String    @db.Uuid
  time      Int?
  priceMin  Int?
  priceMax  Int?
  master    Master    @relation(fields: [masterId], references: [id], onDelete: Cascade)
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  @@unique([masterId, serviceId])
  @@map("master_services")
}


model ServiceCategory {
  id    String   @default(uuid()) @id @db.Uuid
  extId String?
  name    String?
  salon    Salon?    @relation(fields: [salonId], references: [id])
  salonId  String? @db.Uuid
  services Service[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("service_categories")
}

model User {
  id    String   @default(uuid()) @id @db.Uuid
  tgUserId    BigInt
  tgUserName    String?
  tgChatId    BigInt
  role    UserRoles
  salon    Salon?    @relation(fields: [salonId], references: [id])
  salonId  String? @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client? @relation(fields: [clientId], references: [id])
  clientId  String? @db.Uuid @unique
  staff     Staff?  @relation(fields: [staffId], references: [id])
  staffId   String? @db.Uuid @unique
  @@map("users")
}

model Client {
  id    String   @default(uuid()) @id @db.Uuid
  name    String?
  phone    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
  rewiers Review[]
  records Record[]
  @@map("clients")
}

model Staff {
  id    String   @default(uuid()) @id @db.Uuid
  extMasterId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
  rewiers Review[]
  records Record[]
  contacts    StaffContact[]
  @@map("staff")
}

model Review {
  id    String   @default(uuid()) @id @db.Uuid
  title    String?
  description    String?
  date    DateTime @default(now()) @db.Date
  score    Int?
  client    Client?    @relation(fields: [clientId], references: [id])
  clientId  String? @db.Uuid
  staff    Staff?    @relation(fields: [staffId], references: [id])
  staffId  String? @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("reviews")
}

model Record {
  id    String   @default(uuid()) @id @db.Uuid
  extRecordId    String?
  client    Client?    @relation(fields: [clientId], references: [id])
  clientId  String? @db.Uuid
  staff    Staff?    @relation(fields: [staffId], references: [id])
  staffId  String? @db.Uuid
  clientName    String?
  clientPhone    String?
  clientComment    String?
  extDate    DateTime?
  extRecordHash  String?
  extRecordData  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("records")
}

model Contact {
  id    String   @default(uuid()) @id @db.Uuid
  type    ContactTypes
  value   String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  salons    SalonContact[]
  staff    StaffContact[]
  @@map("contacts")
}

model SalonContact {
  id        String    @default(uuid()) @id @db.Uuid
  salonId   String    @db.Uuid
  contactId String    @db.Uuid
  salon     Salon     @relation(fields: [salonId], references: [id], onDelete: Cascade)
  contact   Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  @@unique([salonId, contactId])
  @@map("salon_contacts")
}

model StaffContact {
  id        String    @default(uuid()) @id @db.Uuid
  staffId   String    @db.Uuid
  contactId String    @db.Uuid
  staff     Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  contact   Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  @@unique([staffId, contactId])
  @@map("staff_contacts")
}

enum UserRoles {
  DIRECTOR
  ADMINISTRATOR
  MASTER
  CLIENT
  ADMIN
  SUPERADMIN
  USER
}

enum ContactTypes {
  TELEGRAM
  VIBER
  WHATSAPP
  INSTAGRAM
  VK 
  PHONE
}
