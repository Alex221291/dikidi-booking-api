name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      docker_image_link: ${{ steps.set-env.outputs.docker_image_link }}
      server_path: ${{ steps.set-env.outputs.server_path }}

    steps:
    - name: Set environment variables
      id: set-env
      run: |
        echo "DOCKER_IMAGE_NAME=dikidi_backend" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_TAG=${{ github.base_ref }}" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_LINK=ghcr.io/${{ github.repository }}/dikidi_backend:${{ github.base_ref }}" >> $GITHUB_ENV
        echo "PROJECT_NAME=dikidi" >> $GITHUB_ENV
        echo "SERVER_PATH=${HOME}/dikidi/${{ github.repository }}" >> $GITHUB_ENV
        echo "::set-output name=docker_image_link::ghcr.io/${{ github.repository }}/dikidi_backend:${{ github.base_ref }}"
        echo "::set-output name=server_path::${HOME}/dikidi/${{ github.repository }}"

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_LINK }} .
        docker push ${{ env.DOCKER_IMAGE_LINK }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Deploy to server
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER }} << 'EOF'
          mkdir -p ${{ needs.build-and-push.outputs.server_path }}/${{ github.repository }}
          cd ${{ needs.build-and-push.outputs.server_path }}/${{ github.repository }}
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.base_ref }}/docker-compose.yml
          sed -i 's|image: .*|image: ${{ needs.build-and-push.outputs.docker_image_link }}|' docker-compose.yml
          docker-compose pull
          docker-compose up -d
          # Очистка неиспользуемых Docker-образов
          unused_images=$(docker images -q --filter "dangling=true")
          if [ -n "$unused_images" ]; then
            docker rmi $unused_images
          fi
        EOF
