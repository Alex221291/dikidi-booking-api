name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['18.x', '20.x']

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm install
    - name: Start test
      run: npm test

  build-and-push:
    runs-on: ubuntu-latest
    needs: test

    outputs:
      docker_image_link: ${{ steps.set-env.outputs.docker_image_link }}

    steps:
    - name: Set environment variables
      id: set-env
      run: |
        echo "DOCKER_IMAGE_NAME=dikidi_backend" >> $GITHUB_ENV
        REPOSITORY_NAME_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "DOCKER_IMAGE_LINK=ghcr.io/$REPOSITORY_NAME_LOWER/dikidi_backend:${{ github.ref_name }}" >> $GITHUB_ENV
        echo "::set-output name=docker_image_link::ghcr.io/$REPOSITORY_NAME_LOWER/dikidi_backend:${{ github.ref_name }}"

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        # echo TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} >> .env
        # echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
        docker build -t ${{ env.DOCKER_IMAGE_LINK }} .
        docker push ${{ env.DOCKER_IMAGE_LINK }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
  
    steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
  
    - name: SSH into server and deploy
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER }} << 'EOF'
        REPOSITORY_NAME_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        REPOSITORY_BASE_NAME=$(echo "$REPOSITORY_NAME_LOWER" | cut -d'/' -f2)
        SERVER_PATH=$HOME/dikidi/$REPOSITORY_BASE_NAME
        docker compose -f $SERVER_PATH/docker-compose.yml down && docker rmi ${{ needs.build-and-push.outputs.docker_image_link }}
        rm -rf $SERVER_PATH && mkdir -p $SERVER_PATH && cd $SERVER_PATH
        curl -O https://raw.githubusercontent.com/$REPOSITORY_NAME_LOWER/${{ github.ref_name }}/docker-compose.yml
        curl -O https://raw.githubusercontent.com/$REPOSITORY_NAME_LOWER/${{ github.ref_name }}/.env
        if [ ! -f .env ]; then
          echo "Error: .env file not found. Please ensure it exists in the repository."
          exit 1
        fi
        sed -i "s|image: .*|image: ${{ needs.build-and-push.outputs.docker_image_link }}|" docker-compose.yml
        echo TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} >> .env
        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
        docker compose pull
        docker compose up -d
        # Очистка неиспользуемых Docker-образов
        unused_images=$(docker images -q --filter "dangling=true")
        if [ -n "$unused_images" ]; then
          docker rmi $unused_images
        fi
        EOF
